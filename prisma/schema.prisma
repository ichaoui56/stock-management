// schema.prisma

datasource db {
  provider = "postgresql" // or "mysql" depending on your DB
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String    @id @default(uuid())
  name         String    @db.VarChar(100)
  email        String    @unique @db.VarChar(150)
  passwordHash String    @map("password_hash")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  sales        Sale[]    @relation("UserSales")
  stockMoves   StockMovement[]

  @@map("users")
}

model Product {
  id          String           @id @default(uuid())
  name        String           @db.VarChar(150)
  description String?
  buyPrice    Decimal          @db.Decimal(10, 2) @map("buy_price")
  stockQty    Int              @default(0) @map("stock_qty")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  // Relations
  saleItems   SaleItem[]
  stockMoves  StockMovement[]

  @@map("products")
}

model Sale {
  id        String     @id @default(uuid())
  clientName String?   @db.VarChar(150) @map("client_name")
  userId    String?    @map("user_id")
  date      DateTime   @default(now())
  totalBuy  Decimal    @db.Decimal(12, 2) @map("total_buy")
  totalSell Decimal    @db.Decimal(12, 2) @map("total_sell")
  profit    Decimal    @db.Decimal(12, 2)

  // Relations
  user      User?      @relation("UserSales", fields: [userId], references: [id], onDelete: SetNull)
  items     SaleItem[]
  invoices  Invoice[]

  @@map("sales")
}

model SaleItem {
  id            String   @id @default(uuid())
  saleId        String   @map("sale_id")
  productId     String   @map("product_id")
  quantity      Int
  unitBuyPrice  Decimal  @db.Decimal(10, 2) @map("unit_buy_price")
  unitSellPrice Decimal  @db.Decimal(10, 2) @map("unit_sell_price")
  totalBuy      Decimal  @db.Decimal(12, 2) @map("total_buy")
  totalSell     Decimal  @db.Decimal(12, 2) @map("total_sell")

  // Relations
  sale          Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}

model Invoice {
  id          String   @id @default(uuid())
  saleId      String   @map("sale_id")
  pdfUrl      String?  @map("pdf_url")
  generatedAt DateTime @default(now()) @map("generated_at")

  // Relations
  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model StockMovement {
  id          String   @id @default(uuid())
  productId   String   @map("product_id")
  movementType String  @db.VarChar(20) @map("movement_type") // 'BUY', 'SELL', 'ADJUST'
  quantity    Int
  userId      String?  @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("stock_movements")
}
